<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Debug 方法记录</title>
    <url>/2024/09/28/debug_record/</url>
    <content><![CDATA[<h1 id="Debug-过程总结"><a href="#Debug-过程总结" class="headerlink" title="Debug 过程总结"></a>Debug 过程总结</h1><h2 id="问题背景-主要问题"><a href="#问题背景-主要问题" class="headerlink" title="问题背景 (主要问题)"></a>问题背景 (主要问题)</h2><ol>
<li>问题描述<ol>
<li>在基于 Shardingsphere 5.2.0 版本实现订单表与订单明细表分库分表时 bindtables 参数因 yml 配置格式不熟悉导致绑定表的配置无法生效, 查询出现笛卡尔积现象.</li>
</ol>
</li>
<li>Shardingsphere 相关依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-namespace<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置<ol>
<li>修正前<ul>
<li>配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">shardingsphere:</span></span><br><span class="line">     <span class="comment"># 数据源配置</span></span><br><span class="line">         <span class="attr">datasource:</span></span><br><span class="line">         <span class="string">...</span></span><br><span class="line">         <span class="attr">rules:</span></span><br><span class="line">         <span class="string">...</span></span><br><span class="line">             <span class="attr">binding-tables:</span> <span class="string">t_order,t_order_detail</span></span><br></pre></td></tr></table></figure>
<ul>
<li>问题<br>这样配置绑定表会导致读取的时候,yml 会将 t_order, t_order_detail 作为绑定表集合中的两个绑定表关系, 导致每一个绑定表关系只有一个值, 就是这个表本身, 这样 shardingshpere 就不能知道 t_order,t_order_detail 这两张表属于绑定表</li>
</ul>
</li>
</ul>
</li>
<li>修正后<ul>
<li>配置 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="comment"># 数据源配置</span></span><br><span class="line">        <span class="attr">datasource:</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">        <span class="attr">rules:</span></span><br><span class="line">        <span class="string">...</span></span><br><span class="line">            <span class="attr">binding-tables:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">t_order,t_order_detail</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="问题一-自定义算法提示没有实现-spi"><a href="#问题一-自定义算法提示没有实现-spi" class="headerlink" title="问题一:自定义算法提示没有实现 spi"></a>问题一:自定义算法提示没有实现 spi</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org. Apache. Shardingsphere. Infra. Util. Spi. Exception. ServiceProviderNotFoundException: SPI-00001: No implementation class load from SPI ` org.apache.shardingsphere.sharding.spi.ShardingAlgorithm ` with type ` COSTOM_DATE `.</span><br></pre></td></tr></table></figure>
<p>在 shardingsphere 5.2 版本中,shardingsphere 强制使用 spi 的方式对实现类进行注册, 而不像 4.2 的时候通过实现接口, 将实现类配置到配置文件如 yml 或 properties 中就可以了. 所以需要再 resource 下新建对应的 spi 的接口文件如 org. Apache. Shardingsphere. Sharding. Spi. ShardingAlgorithm, 文件内容为自定义的实现类路径 com.wl.algorithm.sharding.CustomDateShardingAlgorithm</p>
<h3 id="问题二-bindtables-未生效"><a href="#问题二-bindtables-未生效" class="headerlink" title="问题二 : bindtables 未生效"></a>问题二 : bindtables 未生效</h3><p>原因就是之前讲的 yml 配置问题, 格式不对.</p>
<h2 id="Debug-过程总结-1"><a href="#Debug-过程总结-1" class="headerlink" title="Debug 过程总结"></a>Debug 过程总结</h2><h3 id="1-找到程序-debug入口"><a href="#1-找到程序-debug入口" class="headerlink" title="1. 找到程序 debug入口"></a>1. 找到程序 debug入口</h3><ol>
<li>找到 Debug 的入口, 即 shardingsphere 代码执行的哪些过程, 需要再这过程中打断点才能看具体配置读取后 shardingsphere 是如何处理这些配置参数的, 并通过读取配置参数进行正确的分库分表等处理的.</li>
<li>通过 shardingsphere (以下简称 ss) 开放的自定义接口实现 StandardShardingAlgorithm, 知道 shardingsphere 要使用我们的自定义实现, 它会调用我们的实现类中的方法, 如 ss 提供的 StandardShardingAlgorithm 中的两个方法:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StandardShardingAlgorithm</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;?&gt;&gt; <span class="keyword">extends</span> <span class="title class_">ShardingAlgorithm</span> &#123;  </span><br><span class="line">    String <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, PreciseShardingValue&lt;T&gt; shardingValue)</span>;  </span><br><span class="line">    Collection&lt;String&gt; <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, RangeShardingValue&lt;T&gt; shardingValue)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
只要通过 IDEA find usages 就可以找到调用的地方, 可能会有几个, 但是根据类调用的地方根据猜测, 以及尝试 debug 看断点是否进入就可以很快找到调用路径. 通过 IDE debug 进入断点后, 根据 IDEA 提供的 debug 工具, Debugger 窗口, 就可以看到到当前断点之前的整个调用链, 通过这个调用链窗口, 可以去到任意一个节点, 不再需要像无头苍蝇一样整个源码找相关处理源码.<br><img   src="/images/debug_record/image-20231105214353972.png" ></li>
</ol>
<h3 id="2-Debug-相关操作"><a href="#2-Debug-相关操作" class="headerlink" title="2. Debug 相关操作"></a>2. Debug 相关操作</h3><ol>
<li>Debug 常用调试方式<ol>
<li>单步跳入 step into : debug 进入函数</li>
<li>单步跳过 step over : debug 得到函数执行的结果 (如果调用函数的是)</li>
<li>单步跳出 step out : debug 执行函数里面的代码后回到调用该函数的地方</li>
<li>执行到调用链上的断点处 resume programe: 执行代码, 在调用链上的断点处暂停</li>
<li>忽略断点 mute break point: 忽略断点, 直接执行, 拒绝打断</li>
<li>重置调用帧 reset frame&#x2F; drop frame: 返回上一个调用帧, 刚才没看清, 重新走一下, 不需要在重新从最开始的地方一步步 debug 进来. 调用链很长, 而且代码不熟悉时, 这个最有用的工具</li>
</ol>
</li>
<li>其他辅助方式<ol>
<li>书签: 当调用链太长, 而且有些地方没必要或者断点打太多的时候, 可以使用书签进行记录一些那些地方调试的时候注意看一下. 而且通过书签可以很方便回到标记的位置<br><img   src="/images/debug_record/image-20231105220039478.png" ></li>
<li>利用 IDEA 断点执行条件: 可以在断点上设置执行表达式, 当符合条件的时候暂停, 用得不多</li>
<li>使用执行表达式, 随时随地查看调用后的结果, 但是 debug 变量窗口很多时候都已经有结果了</li>
</ol>
</li>
</ol>
<h2 id="最后-一定要注意看日志"><a href="#最后-一定要注意看日志" class="headerlink" title="最后: 一定要注意看日志"></a>最后: 一定要注意看日志</h2><p>有时候很简单的配置问题, 或者编码实现的问题, 其实日志已经很清楚明白讲述了异常的位置, 根据信息去到对应的位置看代码, 大部分情况下都可以发现问题. 根据报错就能知道, 哪里发生了空指针或者其他异常, 然后查看为什么产生了这个空指针, 检查对应的配置参数是否配置或者格式是否正确, 这是最高效, 性价比最高的排查方式, 要知道发生了什么问题.<br>明白了发生了什么问题, 发生问题的地方一时看不明白为什么发生, 再带着这个明确的问题去 debug, 这样 debug 的时候就不需要管其他东西, 只要专注于问题, 基于问题去 debug, 才能尽可能快速的找到问题原因.<br>否则就算能够找到入口 debug, 但是如果不明确问题, 而且现在的开源软件那么大, 一路debug下来别说使用者, 连开发者自己都可能不是很清晰, 那么长的调用链, 没有明确关注的地方, 要知道问题在哪太难了. 而且知名开源软件一般 bug 都不多, 大部分情况下软件出了问题一般也不是 bug, 如果不明确问题, 往往排查了很久, 最后其实是自己的配置问题, 就是花几分钟调整一下配置的问题. 浪费了时间, 最后只能安慰自己起码收获了教训.</p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Running_Page页面</title>
    <url>/2024/10/04/build-running-page/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ol>
<li>Mbp 16 2021</li>
</ol>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><ol>
<li>Github 仓库文档</li>
<li>YouTube <a class="link"   href="https://www.youtube.com/watch?v=reLiY9p8EJk" >https://www.youtube.com/watch?v=reLiY9p8EJk<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li>源码地址： <a class="link"   href="https://github.com/yihong0618/running_page" >https://github.com/yihong0618/running_page<i class="fas fa-external-link-alt"></i></a></li>
<li>安装 python 以及相关的环境<ul>
<li>python3 -m venv myenv</li>
<li>source myenv&#x2F;bin&#x2F;activate</li>
</ul>
</li>
<li>安装需要的包以及启动<ul>
<li>pip 3 ins jtall -r requirements. Txt</li>
<li>npm install -g corepack &amp;&amp; corepack enable &amp;&amp; pnpm install</li>
<li>pnpm develop</li>
</ul>
</li>
<li>测试拉取数据 (用的是 keep)<ul>
<li>拉取数据之后才能生成对应的图表<ul>
<li>python 3 run_page&#x2F;keep_sync. Py ${keep_phone_number} ${keep_password};</li>
</ul>
</li>
<li>生成统计数据<ul>
<li>python 3  run_page&#x2F;gen_svg. Py –from-db –title “跑步记录” –type github –athlete “Awua” –special-distance 10 –special-distance 2 20 –special-color yellow –special-color 2 red –output assets&#x2F;github. Svg –use-localtime –min-distance 0.5</li>
<li>python 3 run_page&#x2F;gen_svg. Py –from-db –type circular –use-localtime</li>
</ul>
</li>
<li>重新启动 pnpm develop 得到基于 keep 拉取数据的图表</li>
</ul>
</li>
<li>将仓库清理掉 git 信息之后重新初始化 git 推送到自己的 github<ol>
<li>配置 Github Action <img   src="/images/build-running-page/github-action-setting-1.png" ></li>
<li><img   src="/images/build-running-page/github-action-setting-2.png" ></li>
</ol>
</li>
<li>配置修改</li>
<li>Run_data_sync.yml<ol start="6">
<li>配置修改<ol>
<li>Run_data_sync. Yml</li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env:</span>  </span><br><span class="line">  <span class="comment"># please change to your own config.  </span></span><br><span class="line">  <span class="attr">RUN_TYPE:</span> <span class="string">keep</span> <span class="comment"># support strava/nike/garmin/coros/garmin_cn/garmin_sync_cn_global/keep/only_gpx/only_fit/nike_to_strava/strava_to_garmin/tcx_to_garmin/strava_to_garmin_cn/garmin_to_strava/garmin_to_strava_cn/codoon/oppo, Please change the &#x27;pass&#x27; it to your own  </span></span><br><span class="line">  <span class="attr">ATHLETE:</span> <span class="string">Awua</span>  </span><br><span class="line">  <span class="attr">TITLE:</span> <span class="string">Awua</span> <span class="string">Running</span>  </span><br><span class="line">  <span class="attr">MIN_GRID_DISTANCE:</span> <span class="number">3.0</span> <span class="comment"># change min distance here  </span></span><br><span class="line">  <span class="attr">TITLE_GRID:</span> <span class="string">Over</span> <span class="string">3km</span> <span class="string">Runs</span> <span class="comment"># also here  </span></span><br><span class="line">  <span class="attr">GITHUB_NAME:</span> <span class="string">&quot;hrers@github.com&quot;</span> <span class="comment"># default Actions bot you can change it to yours  </span></span><br><span class="line">  <span class="attr">GITHUB_EMAIL:</span> <span class="string">&quot;zjwawu@gmail.com&quot;</span> <span class="comment"># default Actions bot you can change it to yours</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>running</tag>
        <tag>building</tag>
      </tags>
  </entry>
</search>
